{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sobol Variance Partitioning Implementation for PEcAn\u2019s uncertainty module Code Availability Mentors: Michael Dietze, Boston University Alexis Helgeson, Boston University Contributor: Erick Calderon-Morales email: erickcamo19@gmail.com Project's Description Quantifying precisely the degree of uncertainty in models predictions and acknowledging the existing data gaps still remains challenging given the immense variety of data sources that exist and the lack of open source tools that quantify the models' uncertainty. The PEcAn (Predictive Ecosystem global Analyzer) project is an open-source tool that aims to solve this problem by synthesizing multiple data sources for the improvement of model-data feedback. With this tool it is possible to use models for forecasting how an ecosystem might respond to climate change and also is possible to quantify the uncertainty around its predictions. However, currently PEcAn uses a method that do not explore the whole parameter space, giving an incomplete quantification of the uncertainty around important variables in models. Thus, it is necessary to develop new functionalities in PEcAn in order to improve the assessment of ecosystem models' uncertainties. The Sobol Variance Partitioning (SVP) is a method for accessing the degree of uncertainty in models that explore all the parameter space, improving the quantification of model uncertainties. In this project, we will focus on developing a new function within PEcAn that estimates the uncertainty components of a model taking into account higher-order parameter interactions using the SVP method.","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#sobol-variance-partitioning-implementation-for-pecans-uncertainty-module","text":"Code Availability Mentors: Michael Dietze, Boston University Alexis Helgeson, Boston University Contributor: Erick Calderon-Morales email: erickcamo19@gmail.com","title":"Sobol Variance Partitioning Implementation for PEcAn\u2019s uncertainty module"},{"location":"#projects-description","text":"Quantifying precisely the degree of uncertainty in models predictions and acknowledging the existing data gaps still remains challenging given the immense variety of data sources that exist and the lack of open source tools that quantify the models' uncertainty. The PEcAn (Predictive Ecosystem global Analyzer) project is an open-source tool that aims to solve this problem by synthesizing multiple data sources for the improvement of model-data feedback. With this tool it is possible to use models for forecasting how an ecosystem might respond to climate change and also is possible to quantify the uncertainty around its predictions. However, currently PEcAn uses a method that do not explore the whole parameter space, giving an incomplete quantification of the uncertainty around important variables in models. Thus, it is necessary to develop new functionalities in PEcAn in order to improve the assessment of ecosystem models' uncertainties. The Sobol Variance Partitioning (SVP) is a method for accessing the degree of uncertainty in models that explore all the parameter space, improving the quantification of model uncertainties. In this project, we will focus on developing a new function within PEcAn that estimates the uncertainty components of a model taking into account higher-order parameter interactions using the SVP method.","title":"Project's Description"},{"location":"Project%27s%20Tasks/","text":"Add the capacity to save ensemble members for all inputs, not just met drivers. Create a basic data frame where rows are ensemble members and columns are different inputs. Feed the basic data frames back into write.ensemble.configs as the sampling design and then to use that design (rather than generating samples) when that argument is present (I'd say the default would be to make that argument NULL and to generate new samples when it's NULL). With those first 3 tasks in place you should be well-positioned at a higher-level to work on generating the Sobol designs and postprocessing the outputs. Work done","title":"Project's Tasks"},{"location":"Getting%20Start%20with%20PEcAn%27s%20Models/Code/Code%20for%20running%20BIOCRO%20model/","text":"# Clean environment ------------------------------------------------------------ rm ( list = ls ()) # Load packages ---------------------------------------------------------------- library ( PEcAn.all ) library ( PEcAn.BIOCRO ) library ( PEcAn.utils ) library ( RCurl ) # Working directory ------------------------------------------------------------ setwd ( '/home/carya' ) getwd () # Read settings file ----------------------------------------------------------- settings <- PEcAn.settings :: read.settings ( \"./gsoc_project_2022_vm/xml_files/simple_biocro.xml\" ) # PEcAn Workflow --------------------------------------------------------------- settings <- PEcAn.settings :: prepare.settings ( settings , force = FALSE ) ## Write pecan.CHECKED.xml ----------------------------------------------------- PEcAn.settings :: write.settings ( settings , outputfile = \"pecan.CHECKED.xml\" ) PEcAn.settings :: check.workflow.settings ( settings ) ## Do conversions -------------------------------------------------------------- settings <- PEcAn.workflow :: do_conversions ( settings ) ## Query the trait database for data and priors ------------------------------- settings <- runModule.get.trait.data ( settings ) ## Check db connection --------------------------------------------------------- print ( db.open ( settings $ database $ bety )) ## Run the PEcAn meta.analysis ------------------------------------------------- runModule.run.meta.analysis ( settings ) ## Write model specific configs ------------------------------------------------ settings <- PEcAn.workflow :: runModule.run.write.configs ( settings ) PEcAn.settings :: write.settings ( settings , outputfile = 'pecan.CONFIGS.xml' ) ## Start ecosystem model runs -------------------------------------------------- PEcAn.remote :: runModule.start.model.runs ( settings , stop.on.error = FALSE ) ### Get results of model runs -------------------------------------------------- # Step for generating ensemble.output runModule.get.results ( settings ) ## Run ensemble analysis on model output --------------------------------------- runModule.run.ensemble.analysis ( settings , TRUE ) ## Run sensitivity analysis on model output ------------------------------------ runModule.run.sensitivity.analysis ( settings ) # End -------------------------------------------------------------------------- rm ( list = ls ())","title":"Code for running BIOCRO model"},{"location":"Getting%20Start%20with%20PEcAn%27s%20Models/Code/Code%20for%20running%20SIPNET%20model/","text":"# Clean environment ------------------------------------------------------------ rm ( list = ls ()) settings <- PEcAn.settings :: read.settings ( \"./gsoc_project_2022/xml_files/v4_harvard_sipnet.xml\" ) # Configure settings ----------------------------------------------------------- # Modify xml settings $ ensemble $ size <- 4 settings $ ensemble $ samplingspace $ parameters $ method <- 'lhc' # PEcAn Workflow --------------------------------------------------------------- ## Load required libraries ----------------------------------------------------- library ( \"PEcAn.all\" ) library ( \"RCurl\" ) # Open and read in settings file for PEcAn run. #settings # Check for additional modules that will require adding settings if ( \"benchmarking\" %in% names ( settings )) { library ( PEcAn.benchmark ) settings <- papply ( settings , read_settings_BRR ) } if ( \"sitegroup\" %in% names ( settings )) { if ( is.null ( settings $ sitegroup $ nSite )) { settings <- PEcAn.settings :: createSitegroupMultiSettings ( settings , sitegroupId = settings $ sitegroup $ id ) } else { settings <- PEcAn.settings :: createSitegroupMultiSettings ( settings , sitegroupId = settings $ sitegroup $ id , nSite = settings $ sitegroup $ nSite ) } # zero out so don't expand a second time if re-reading settings $ sitegroup <- NULL } # Update/fix/check settings. # Will only run the first time it's called, unless force=TRUE error settings <- PEcAn.settings :: prepare.settings ( settings , force = FALSE ) ## Write pecan.CHECKED.xml ----------------------------------------------------- PEcAn.settings :: write.settings ( settings , outputfile = \"pecan.CHECKED.xml\" ) ## Do conversions -------------------------------------------------------------- settings <- PEcAn.workflow :: do_conversions ( settings ) ## Check db connection --------------------------------------------------------- print ( db.open ( settings $ database $ bety )) ## Query the trait database for data and priors -------------------------------- if ( PEcAn.utils :: status.check ( \"TRAIT\" ) == 0 ) { PEcAn.utils :: status.start ( \"TRAIT\" ) settings <- PEcAn.workflow :: runModule.get.trait.data ( settings ) PEcAn.settings :: write.settings ( settings , outputfile = \"pecan.TRAIT.xml\" ) PEcAn.utils :: status.end () } else if ( file.exists ( file.path ( settings $ outdir , \"pecan.TRAIT.xml\" ))) { settings <- PEcAn.settings :: read.settings ( file.path ( settings $ outdir , \"pecan.TRAIT.xml\" )) } ## Run the PEcAn meta.analysis ------------------------------------------------- if ( ! is.null ( settings $ meta.analysis )) { if ( PEcAn.utils :: status.check ( \"META\" ) == 0 ) { PEcAn.utils :: status.start ( \"META\" ) PEcAn.MA :: runModule.run.meta.analysis ( settings ) PEcAn.utils :: status.end () } } ## Write model specific configs ------------------------------------------------ if ( PEcAn.utils :: status.check ( \"CONFIG\" ) == 0 ) { PEcAn.utils :: status.start ( \"CONFIG\" ) settings <- PEcAn.workflow :: runModule.run.write.configs ( settings ) PEcAn.settings :: write.settings ( settings , outputfile = \"pecan.CONFIGS.xml\" ) PEcAn.utils :: status.end () } else if ( file.exists ( file.path ( settings $ outdir , \"pecan.CONFIGS.xml\" ))) { settings <- PEcAn.settings :: read.settings ( file.path ( settings $ outdir , \"pecan.CONFIGS.xml\" )) } ## Start ecosystem model runs -------------------------------------------------- PEcAn.remote :: runModule.start.model.runs ( settings ) ### Get results of model runs -------------------------------------------------- if ( PEcAn.utils :: status.check ( \"OUTPUT\" ) == 0 ) { PEcAn.utils :: status.start ( \"OUTPUT\" ) runModule.get.results ( settings ) PEcAn.utils :: status.end () } ## Run ensemble analysis on model output --------------------------------------- if ( \"ensemble\" %in% names ( settings ) && PEcAn.utils :: status.check ( \"ENSEMBLE\" ) == 0 ) { PEcAn.utils :: status.start ( \"ENSEMBLE\" ) runModule.run.ensemble.analysis ( settings , TRUE ) PEcAn.utils :: status.end () } ## Run sensitivity analysis and variance decomposition on model output --------- if ( \"sensitivity.analysis\" %in% names ( settings ) && PEcAn.utils :: status.check ( \"SENSITIVITY\" ) == 0 ) { PEcAn.utils :: status.start ( \"SENSITIVITY\" ) runModule.run.sensitivity.analysis ( settings ) PEcAn.utils :: status.end () } ## Run parameter data assimilation --------------------------------------------- if ( \"assim.batch\" %in% names ( settings )) { if ( PEcAn.utils :: status.check ( \"PDA\" ) == 0 ) { PEcAn.utils :: status.start ( \"PDA\" ) settings <- PEcAn.assim.batch :: runModule.assim.batch ( settings ) PEcAn.utils :: status.end () } } ## Run state data assimilation ------------------------------------------------- if ( \"state.data.assimilation\" %in% names ( settings )) { if ( PEcAn.utils :: status.check ( \"SDA\" ) == 0 ) { PEcAn.utils :: status.start ( \"SDA\" ) settings <- sda.enfk ( settings ) PEcAn.utils :: status.end () } } ## Run benchmarking ------------------------------------------------------------ if ( \"benchmarking\" %in% names ( settings ) && \"benchmark\" %in% names ( settings $ benchmarking )) { PEcAn.utils :: status.start ( \"BENCHMARKING\" ) results <- papply ( settings , function ( x ) { calc_benchmark ( x , bety ) }) PEcAn.utils :: status.end () }","title":"Code for running SIPNET model"},{"location":"Getting%20Start%20with%20PEcAn%27s%20Models/Model%20configuration/Basic_BIOCRO_model/","text":"<pecan> <database> <bety> <driver> PostgreSQL </driver> <user> bety </user> <password> bety </password> <host> postgres </host> <dbname> bety </dbname> <write> TRUE </write> </bety> <dbfiles> /home/carya/gsoc_project_2022/pecan_runs/pecan_run_salix/dbfiles </dbfiles> </database> <workflow> <id> 1000019857 </id> </workflow> <pfts> <pft> <name> salix </name> </pft> </pfts> <ensemble> <size> 5 </size> <variable> AbvGrndWood </variable> <ensemble.id> 1000033780 </ensemble.id> <samplingspace> <parameters> <method> lhc </method> </parameters> <met> <method> sampling </method> </met> <veg> <method> sampling </method> </veg> </samplingspace> </ensemble> <meta.analysis> <iter> 3000 </iter> <random.effects> FALSE </random.effects> <threshold> 1.2 </threshold> <update> AUTO </update> </meta.analysis> <sensitivity.analysis> <quantiles> <sigma> -1 </sigma> <sigma> 1 </sigma> </quantiles> <variable> AbvGrndWood </variable> </sensitivity.analysis> <model> <id> 7 </id> <binary> ~/gsoc_project_2022/models/biocro.Rscript </binary> <revision> 0.95 </revision> </model> <run> <site> <id> 288 </id> <lat> 31.40 </lat> <lon> -81.37 </lon> <site.pft> <pft.name> salix </pft.name> </site.pft> </site> <inputs> <met> <output> ~/gsoc_project_2022/pecan_runs/pecan_run_salix/run/ </output> <path> ~/gsoc_project_2022/data/US.Bo1 </path> </met> <!--soil--> <veg> <output> ~/gsoc_project_2022/pecan_runs/pecan_run_salix/run/ </output> <path> ~/gsoc_project_2022/data/hwsd.nc </path> </veg> </inputs> <start.date> 2008/01/01 </start.date> <end.date> 2008/12/31 </end.date> <host> <name> localhost </name> </host> </run> </pecan>","title":"Basic BIOCRO model"},{"location":"Getting%20Start%20with%20PEcAn%27s%20Models/Model%20configuration/Basic_SIPNET%20model/","text":"<?xml version=\"1.0\"?> <pecan> <info> <notes></notes> <username> ecalder1 </username> <date> 2022/08/27 18:33:38 +0000 </date> </info> <outdir> /data/workflows/PEcAn_99000000012 </outdir> <!-- db config --> <database> <bety> <user> bety </user> <password> bety </password> <host> postgres </host> <port> 5432 </port> <dbname> bety </dbname> <driver> PostgreSQL </driver> <write> true </write> </bety> <dbfiles> /data/dbfiles </dbfiles> </database> <!-- Plant functional type --> <pfts> <pft> <name> temperate.deciduous </name> </pft> </pfts> <!-- Meta Analysis config --> <meta.analysis> <iter> 3000 </iter> <random.effects> <on> FALSE </on> <use_ghs> TRUE </use_ghs> </random.effects> </meta.analysis> <!-- Ensemble config --> <ensemble> <size> 4 </size> <variable> NPP </variable> <start.year> 2004 </start.year> <end.year> 2004 </end.year> <samplingspace> <parameters> <method> uniform </method> </parameters> <met> <method> sampling </method> </met> </samplingspace> </ensemble> <model> <id> 1000000014 </id> </model> <workflow> <id> 99000000011 </id> </workflow> <run> <site> <id> 772 </id> <met.start> 2002-01-01 00:00:00 </met.start> <met.end> 2005-12-31 00:00:00 </met.end> </site> <inputs> <met> <id> 5000000005 </id> </met> </inputs> <start.date> 2004/01/01 </start.date> <end.date> 2004/12/31 </end.date> </run> <host> <name> localhost </name> <rabbitmq> <uri> amqp://guest:guest@rabbitmq/%2F </uri> <queue> SIPNET_r136 </queue> </rabbitmq> </host> </pecan>","title":"Basic SIPNET model"}]}